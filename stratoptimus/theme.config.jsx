export default {
      logo: <span>StratOptimus-TradingWizard - made with Lumentis</span>,
      editLink: {
        component: null,
      },
      project: {
        link: "https://github.com/hrishioa/lumentis",
      },
      feedback: {
        content: null,
      },
      footer: {
        text: (
          <>
            Made with ðŸ«¶ by&nbsp;
            <a href="https://twitter.com/hrishioa" target="_blank">
              Hrishi - say hi!
            </a>
          </>
        ),
      },
      head: (
        <>
          <meta property="og:title" content="StratOptimus-TradingWizard" />
          <meta property="og:description" content="Certainly! Based on the provided code snippets and context, here's a comprehensive description of your project's source:---## Project Source Overview### IntroductionThe **Best Trading Strategy Project** is an advanced initiative aimed at developing, optimizing, and implementing sophisticated trading strategies using cutting-edge technologies. The project leverages the **MetaGPT** framework for intelligent workflow automation and management, combined with powerful libraries such as **JAX**, **Python**, **NumPy**, and **Machine Learning** tools to analyze financial markets, predict trends, and execute trades with high efficiency and profitability.### Project ComponentsThe project is structured into several key directories and modules, each responsible for distinct functionalities. Below is an overview of the primary components and their roles within the project:#### 1. **Actions Directory (`actions/`)**This directory contains various Python scripts that define custom actions essential for the project's workflow automation. Each action is implemented as a Python class inheriting from `metagpt.actions.Action`, encapsulating specific tasks and operations.- **Key Action Scripts:**    - `project_management.py` & `project_management_an.py`: Handle project management tasks, including task listing, refining, and managing project dependencies.    - `write_prd.py` & `write_prd_an.py`: Manage the creation and updating of Product Requirement Documents (PRD), ensuring that project requirements are well-documented and refined.    - `write_code.py`: Facilitates the implementation of code based on predefined specifications and designs, adhering to best coding practices.    - `write_code_review.py`: Conducts thorough code reviews, providing constructive feedback and suggestions for improvements.    - `prepare_documents.py`: Initializes the project workspace, sets up necessary documentation, and manages Git repository configurations.    - `research.py`: Performs in-depth research on trading strategies and market dynamics to inform strategy development.    - `summarize_code.py`: Aggregates and summarizes code-related issues and insights for use in code writing and optimization processes.    - `search_and_summarize.py`: Handles online searches and summarizes relevant information to support research and development activities.#### 2. **Trading Workflows Directory (`Trading/workflows/`)**This directory encompasses workflow definitions and prompt templates specifically tailored for trading strategy development and optimization.- **Subdirectories:**    - `round_1/`: Contains prompts related to the initial round of strategy evaluation and adjustment.    - `template/`: Houses generic prompt templates used across various workflows, facilitating parameter optimization and strategy assessment.- **Key Prompt Files:**    - `prompt.py`: Defines multiple prompts such as `PARAMETER_OPTIMIZATION_PROMPT`, `STRATEGY_EVALUATION_PROMPT`, `BACKTEST_RESULT_PROMPT`, and `STRATEGY_ADJUSTMENT_PROMPT` that guide the AI in evaluating and refining trading strategies based on performance metrics.    - `op_prompt.py`: Contains prompts focused on optimizing trading strategy parameters and evaluating their effectiveness through backtesting and performance analysis.#### 3. **Prompts Directory (`prompts/`)**This directory stores customized prompt templates that guide the AI in various tasks, ensuring consistency and accuracy in responses.- **Key Prompt Files:**    - `optimize_prompt.py`: Includes prompts like `WORKFLOW_OPTIMIZE_PROMPT`, `WORKFLOW_INPUT`, and `WORKFLOW_TEMPLATE` that assist in building and optimizing workflow graphs for trading strategy enhancements.#### 4. **Source Backend Directory (`src/backend/`)**This module contains the main application logic responsible for the backend operations of the project. The `main.py` file serves as the entry point for backend processes, orchestrating interactions between different components and managing data flow.#### 5. **Documentation Directory (`docs/`)**All project-related documentation is organized within this directory to maintain clarity and accessibility.- **Key Documentation Files:**    - `requirements.txt`: Lists all third-party packages and dependencies required for the project, ensuring a consistent development environment.    - `prd/`: Contains detailed Product Requirement Documents that outline the project's objectives, specifications, and functional requirements.#### 6. **Configuration Directory (`config/`)**Configuration files that manage project-specific settings and parameters are stored here, allowing for easy customization and adaptability across different environments.- **Key Configuration Files:**    - `wizard.json`: Defines crucial project configurations such as model selections, console output settings, learning rates, and other hyperparameters essential for strategy development and execution.#### 7. **Tests Directory (`tests/`)**This directory is dedicated to automated testing, ensuring the reliability and correctness of the project's codebase through comprehensive test suites.- **Key Test Files:**    - `__init__.py`: Initializes the tests module, allowing for the discovery and execution of test cases across the project.#### 8. **Root Configuration and Documentation Files**- `best_trading_strategy_final.json` & `best_trading_strategy_iteration_1.json`: JSON files that likely store finalized and iterative configurations or results related to trading strategies.  - `operator.json`: May contain operator configurations or definitions critical for workflow management and execution.  - `README.md`: Serves as the comprehensive source of truth for the project, detailing its structure, components, setup instructions, usage guidelines, contribution protocols, and contact information.### Communication and Content TypeThe project's source code primarily consists of Python scripts that define actions, prompts, configurations, and workflows essential for automating and optimizing trading strategies. The communication within the codebase is predominantly internal, facilitating the seamless interaction between different components through well-defined interfaces and protocols.- **Types of Content:**    - **Action Definitions:** Encapsulate specific tasks and operations within the workflow automation framework.    - **Prompt Templates:** Provide structured instructions and guidelines for the AI to follow during strategy evaluation and optimization.    - **Configuration Files:** Manage project settings, ensuring flexibility and adaptability across various development and deployment environments.    - **Documentation:** Offer detailed insights into project requirements, design specifications, and implementation guidelines to maintain clarity and consistency.### Best Practices and StandardsThe project adheres to industry-standard best practices to ensure code quality, maintainability, and performance:- **Code Style:** Follows PEP 8 guidelines for Python code, ensuring readability and consistency.  - **Functional Programming:** Emphasizes functional programming paradigms, minimizing the use of classes and avoiding in-place mutations to maintain immutability and side-effect-free functions.  - **JAX Optimization:** Utilizes JAX's powerful features such as just-in-time (JIT) compilation, vectorization (`vmap`), and automatic differentiation (`jax.grad`) to enhance computational performance and efficiency.  - **Error Handling:** Implements robust error handling and input validation to prevent runtime errors and ensure graceful handling of unexpected scenarios.  - **Testing:** Incorporates comprehensive unit tests using frameworks like `pytest` to validate the correctness and reliability of code modules.  - **Documentation:** Maintains thorough documentation through docstrings, inline comments, and the main `README.md` to facilitate ease of understanding and future maintenance.### ConclusionThe **Stratoptimus** is meticulously engineered to leverage advanced AI and machine learning techniques for developing high-performance trading strategies. By integrating the MetaGPT framework with robust coding practices and comprehensive documentation, the project ensures scalability, maintainability, and operational excellence. As the project evolves, continuous adherence to best practices and detailed documentation will sustain its integrity and effectiveness in the dynamic landscape of financial trading.---This overview provides a detailed understanding of your project's structure, components, and best practices, serving as a valuable reference for collaborators, maintainers, and stakeholders involved in the development and optimization of the trading strategies." />
          <meta name="robots" content="noindex, nofollow" />
          <link rel="icon" type="image/x-icon" href="https://raw.githubusercontent.com/jmanhype/StratOptimus/refs/heads/main/wizard.png" />
        </>
      ),
    };
    