{
  "dependencies": {
    "@types/node": "^22.7.7",
    "next": "^14.2.15",
    "nextra": "^3.0.15",
    "nextra-theme-docs": "^3.0.15",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "typescript": "^5.6.3"
  },
  "name": "StratOptimus-TradingWizard-with-lumentis",
  "description": "Certainly! Based on the provided code snippets and context, here's a comprehensive description of your project's source:---## Project Source Overview### IntroductionThe **Best Trading Strategy Project** is an advanced initiative aimed at developing, optimizing, and implementing sophisticated trading strategies using cutting-edge technologies. The project leverages the **MetaGPT** framework for intelligent workflow automation and management, combined with powerful libraries such as **JAX**, **Python**, **NumPy**, and **Machine Learning** tools to analyze financial markets, predict trends, and execute trades with high efficiency and profitability.### Project ComponentsThe project is structured into several key directories and modules, each responsible for distinct functionalities. Below is an overview of the primary components and their roles within the project:#### 1. **Actions Directory (`actions/`)**This directory contains various Python scripts that define custom actions essential for the project's workflow automation. Each action is implemented as a Python class inheriting from `metagpt.actions.Action`, encapsulating specific tasks and operations.- **Key Action Scripts:**    - `project_management.py` & `project_management_an.py`: Handle project management tasks, including task listing, refining, and managing project dependencies.    - `write_prd.py` & `write_prd_an.py`: Manage the creation and updating of Product Requirement Documents (PRD), ensuring that project requirements are well-documented and refined.    - `write_code.py`: Facilitates the implementation of code based on predefined specifications and designs, adhering to best coding practices.    - `write_code_review.py`: Conducts thorough code reviews, providing constructive feedback and suggestions for improvements.    - `prepare_documents.py`: Initializes the project workspace, sets up necessary documentation, and manages Git repository configurations.    - `research.py`: Performs in-depth research on trading strategies and market dynamics to inform strategy development.    - `summarize_code.py`: Aggregates and summarizes code-related issues and insights for use in code writing and optimization processes.    - `search_and_summarize.py`: Handles online searches and summarizes relevant information to support research and development activities.#### 2. **Trading Workflows Directory (`Trading/workflows/`)**This directory encompasses workflow definitions and prompt templates specifically tailored for trading strategy development and optimization.- **Subdirectories:**    - `round_1/`: Contains prompts related to the initial round of strategy evaluation and adjustment.    - `template/`: Houses generic prompt templates used across various workflows, facilitating parameter optimization and strategy assessment.- **Key Prompt Files:**    - `prompt.py`: Defines multiple prompts such as `PARAMETER_OPTIMIZATION_PROMPT`, `STRATEGY_EVALUATION_PROMPT`, `BACKTEST_RESULT_PROMPT`, and `STRATEGY_ADJUSTMENT_PROMPT` that guide the AI in evaluating and refining trading strategies based on performance metrics.    - `op_prompt.py`: Contains prompts focused on optimizing trading strategy parameters and evaluating their effectiveness through backtesting and performance analysis.#### 3. **Prompts Directory (`prompts/`)**This directory stores customized prompt templates that guide the AI in various tasks, ensuring consistency and accuracy in responses.- **Key Prompt Files:**    - `optimize_prompt.py`: Includes prompts like `WORKFLOW_OPTIMIZE_PROMPT`, `WORKFLOW_INPUT`, and `WORKFLOW_TEMPLATE` that assist in building and optimizing workflow graphs for trading strategy enhancements.#### 4. **Source Backend Directory (`src/backend/`)**This module contains the main application logic responsible for the backend operations of the project. The `main.py` file serves as the entry point for backend processes, orchestrating interactions between different components and managing data flow.#### 5. **Documentation Directory (`docs/`)**All project-related documentation is organized within this directory to maintain clarity and accessibility.- **Key Documentation Files:**    - `requirements.txt`: Lists all third-party packages and dependencies required for the project, ensuring a consistent development environment.    - `prd/`: Contains detailed Product Requirement Documents that outline the project's objectives, specifications, and functional requirements.#### 6. **Configuration Directory (`config/`)**Configuration files that manage project-specific settings and parameters are stored here, allowing for easy customization and adaptability across different environments.- **Key Configuration Files:**    - `wizard.json`: Defines crucial project configurations such as model selections, console output settings, learning rates, and other hyperparameters essential for strategy development and execution.#### 7. **Tests Directory (`tests/`)**This directory is dedicated to automated testing, ensuring the reliability and correctness of the project's codebase through comprehensive test suites.- **Key Test Files:**    - `__init__.py`: Initializes the tests module, allowing for the discovery and execution of test cases across the project.#### 8. **Root Configuration and Documentation Files**- `best_trading_strategy_final.json` & `best_trading_strategy_iteration_1.json`: JSON files that likely store finalized and iterative configurations or results related to trading strategies.  - `operator.json`: May contain operator configurations or definitions critical for workflow management and execution.  - `README.md`: Serves as the comprehensive source of truth for the project, detailing its structure, components, setup instructions, usage guidelines, contribution protocols, and contact information.### Communication and Content TypeThe project's source code primarily consists of Python scripts that define actions, prompts, configurations, and workflows essential for automating and optimizing trading strategies. The communication within the codebase is predominantly internal, facilitating the seamless interaction between different components through well-defined interfaces and protocols.- **Types of Content:**    - **Action Definitions:** Encapsulate specific tasks and operations within the workflow automation framework.    - **Prompt Templates:** Provide structured instructions and guidelines for the AI to follow during strategy evaluation and optimization.    - **Configuration Files:** Manage project settings, ensuring flexibility and adaptability across various development and deployment environments.    - **Documentation:** Offer detailed insights into project requirements, design specifications, and implementation guidelines to maintain clarity and consistency.### Best Practices and StandardsThe project adheres to industry-standard best practices to ensure code quality, maintainability, and performance:- **Code Style:** Follows PEP 8 guidelines for Python code, ensuring readability and consistency.  - **Functional Programming:** Emphasizes functional programming paradigms, minimizing the use of classes and avoiding in-place mutations to maintain immutability and side-effect-free functions.  - **JAX Optimization:** Utilizes JAX's powerful features such as just-in-time (JIT) compilation, vectorization (`vmap`), and automatic differentiation (`jax.grad`) to enhance computational performance and efficiency.  - **Error Handling:** Implements robust error handling and input validation to prevent runtime errors and ensure graceful handling of unexpected scenarios.  - **Testing:** Incorporates comprehensive unit tests using frameworks like `pytest` to validate the correctness and reliability of code modules.  - **Documentation:** Maintains thorough documentation through docstrings, inline comments, and the main `README.md` to facilitate ease of understanding and future maintenance.### ConclusionThe **Stratoptimus** is meticulously engineered to leverage advanced AI and machine learning techniques for developing high-performance trading strategies. By integrating the MetaGPT framework with robust coding practices and comprehensive documentation, the project ensures scalability, maintainability, and operational excellence. As the project evolves, continuous adherence to best practices and detailed documentation will sustain its integrity and effectiveness in the dynamic landscape of financial trading.---This overview provides a detailed understanding of your project's structure, components, and best practices, serving as a valuable reference for collaborators, maintainers, and stakeholders involved in the development and optimization of the trading strategies.",
  "version": "0.0.1",
  "scripts": {
    "devstart": "next dev -p 5656 & node start.js",
    "dev": "next dev -p 5656",
    "build": "next build",
    "start": "next start"
  },
  "keywords": [
    "```markdown## Core Themes & Keywords### Core Themes- **Quantitative Trading:** Developing data-driven trading strategies using advanced numerical and statistical methods to capitalize on market opportunities.  - **Machine Learning Integration:** Leveraging machine learning algorithms to enhance predictive analytics",
    "optimize trading parameters",
    "and improve decision-making processes.  - **High-Performance Computing:** Utilizing **JAX** for efficient numerical computations and just-in-time (JIT) compilation to achieve optimal performance and scalability.  - **Workflow Automation:** Implementing the **MetaGPT** framework to streamline and automate development workflows",
    "enhancing productivity and reducing manual intervention.  - **Risk Management:** Incorporating comprehensive risk assessment and mitigation strategies to safeguard trading operations and ensure sustainable profitability.  - **Data Analysis and Ingestion:** Managing the acquisition",
    "cleaning",
    "and transformation of financial data from multiple sources to support robust strategy development.  - **Strategy Optimization:** Continuously refining trading strategies based on backtesting results and performance metrics to maximize returns and minimize risks.  - **Scalability and Maintainability:** Ensuring the project is scalable and maintainable through a modular design",
    "adhering to best coding practices",
    "and comprehensive documentation.  - **Functional Programming Paradigms:** Emphasizing functional programming to promote code clarity",
    "immutability",
    "and ease of testing",
    "enhancing overall code quality.### Keywords- **Quantitative Trading**- **JAX**- **Python**- **NumPy**- **Machine Learning**- **MetaGPT**- **AI-Driven Strategy**- **Workflow Automation**- **Backtesting**- **Risk Management**- **Performance Optimization**- **Data Ingestion**- **Functional Programming**- **PEP 8 Compliance**- **Pytest**- **Automated Testing**- **Technical Documentation**- **Scalability**- **Maintainability**- **Data-Driven Decision Making**- **High-Performance Computing**- **Strategy Refinement**- **Financial Analytics**- **Predictive Modeling**```### Explanation of Core Themes & Keywords:#### **Core Themes:**1. **Quantitative Trading:** Focuses on the application of mathematical and statistical models to develop trading strategies that can systematically exploit market inefficiencies.2. **Machine Learning Integration:** Highlights the use of machine learning techniques to enhance the predictive power and adaptability of trading strategies.3. **High-Performance Computing:** Emphasizes the importance of efficient computational tools like JAX to handle large datasets and complex calculations swiftly.4. **Workflow Automation:** Demonstrates the use of MetaGPT to automate repetitive tasks",
    "thereby increasing efficiency and allowing focus on strategic development.5. **Risk Management:** Underlines the necessity of identifying",
    "analyzing",
    "and mitigating risks to protect investment portfolios and ensure long-term success.6. **Data Analysis and Ingestion:** Details the process of collecting",
    "cleaning",
    "and preparing data essential for accurate strategy development and backtesting.7. **Strategy Optimization:** Focuses on the iterative process of refining trading strategies based on empirical performance data to achieve optimal results.8. **Scalability and Maintainability:** Stresses the importance of building a codebase that can grow and adapt over time without compromising on quality or performance.9. **Functional Programming Paradigms:** Advocates for writing code in a functional style to enhance readability",
    "reduce side effects",
    "and simplify debugging.#### **Keywords:**A curated list of terms that encapsulate the project's focus areas",
    "technologies used",
    "and methodologies adopted. These keywords aid in categorizing the project",
    "enhancing discoverability",
    "and aligning with industry standards.---This section provides a clear and concise overview of the fundamental themes and keywords that define the **StratOptimus-TradingWizard** project. It serves to inform readers about the project's core focus areas",
    "ensuring that stakeholders and contributors have a shared understanding of its objectives and methodologies.Feel free to adjust or expand upon these themes and keywords to better fit the specific nuances and unique aspects of your project."
  ]
}